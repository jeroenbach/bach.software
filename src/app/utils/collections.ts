/**
 * Converts an array of items into a dictionary (object) where the keys are generated
 * by a provided function and the values are the items themselves.
 *
 * @template T - The type of items in the array.
 * @template K - The type of keys in the resulting dictionary.
 *
 * @param {T[]} array - The array of items to convert into a dictionary.
 * @param {(item: T) => K} getKey - A function that takes an item and returns a key for that item.
 *
 * @returns {Record<K, T>} - A dictionary where the keys are generated by the getKey function
 * and the values are the items from the array.
 */
export const toDictionary = <T, K extends PropertyKey>(
  array: T[],
  getKey: (item: T) => K,
): Record<K, T> => {
  return array.reduce(
    (acc, item) => {
      acc[getKey(item)] = item;
      return acc;
    },
    {} as Record<K, T>,
  );
};
