/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PageReads}
 */
// @ts-ignore
export function createPageReadsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPageReads;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProblemDetails_extensions}
 */
// @ts-ignore
export function createProblemDetails_extensionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProblemDetails_extensions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ProblemDetails}
 */
// @ts-ignore
export function createProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoProblemDetails;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPageReads(pageReads: Partial<PageReads> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "halfRead": n => { pageReads.halfRead = n.getNumberValue(); },
        "quarterRead": n => { pageReads.quarterRead = n.getNumberValue(); },
        "read": n => { pageReads.read = n.getNumberValue(); },
        "threeQuarterRead": n => { pageReads.threeQuarterRead = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProblemDetails(problemDetails: Partial<ProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { problemDetails.detail = n.getStringValue(); },
        "extensions": n => { problemDetails.extensions = n.getObjectValue<ProblemDetails_extensions>(createProblemDetails_extensionsFromDiscriminatorValue); },
        "instance": n => { problemDetails.instance = n.getStringValue(); },
        "status": n => { problemDetails.status = n.getNumberValue(); },
        "title": n => { problemDetails.title = n.getStringValue(); },
        "type": n => { problemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoProblemDetails_extensions(problemDetails_extensions: Partial<ProblemDetails_extensions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface PageReads extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The halfRead property
     */
    halfRead?: number | null;
    /**
     * The quarterRead property
     */
    quarterRead?: number | null;
    /**
     * The read property
     */
    read?: number | null;
    /**
     * The threeQuarterRead property
     */
    threeQuarterRead?: number | null;
}
export interface ProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The extensions property
     */
    extensions?: ProblemDetails_extensions | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface ProblemDetails_extensions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePageReads(writer: SerializationWriter, pageReads: Partial<PageReads> | undefined | null = {}) : void {
    if (pageReads) {
        writer.writeNumberValue("halfRead", pageReads.halfRead);
        writer.writeNumberValue("quarterRead", pageReads.quarterRead);
        writer.writeNumberValue("read", pageReads.read);
        writer.writeNumberValue("threeQuarterRead", pageReads.threeQuarterRead);
        writer.writeAdditionalData(pageReads.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProblemDetails(writer: SerializationWriter, problemDetails: Partial<ProblemDetails> | undefined | null = {}) : void {
    if (problemDetails) {
        writer.writeStringValue("detail", problemDetails.detail);
        writer.writeObjectValue<ProblemDetails_extensions>("extensions", problemDetails.extensions, serializeProblemDetails_extensions);
        writer.writeStringValue("instance", problemDetails.instance);
        writer.writeNumberValue("status", problemDetails.status);
        writer.writeStringValue("title", problemDetails.title);
        writer.writeStringValue("type", problemDetails.type);
        writer.writeAdditionalData(problemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeProblemDetails_extensions(writer: SerializationWriter, problemDetails_extensions: Partial<ProblemDetails_extensions> | undefined | null = {}) : void {
    if (problemDetails_extensions) {
        writer.writeAdditionalData(problemDetails_extensions.additionalData);
    }
}
/* tslint:enable */
/* eslint-enable */
