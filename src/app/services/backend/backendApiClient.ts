/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { AnalyticsRequestBuilderNavigationMetadata, type AnalyticsRequestBuilder } from './analytics/index.js';
// @ts-ignore
import { HealthRequestBuilderRequestsMetadata, type HealthRequestBuilder } from './health/index.js';
// @ts-ignore
import { apiClientProxifier, ParseNodeFactoryRegistry, SerializationWriterFactoryRegistry, type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type RequestAdapter } from '@microsoft/kiota-abstractions';

/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export interface BackendApiClient extends BaseRequestBuilder<BackendApiClient> {
    /**
     * The analytics property
     */
    get analytics(): AnalyticsRequestBuilder;
    /**
     * The health property
     */
    get health(): HealthRequestBuilder;
}
/**
 * Instantiates a new {@link BackendApiClient} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createBackendApiClient(requestAdapter: RequestAdapter) {
    if (requestAdapter === undefined) {
        throw new Error("requestAdapter cannot be undefined");
    }
    let serializationWriterFactory : SerializationWriterFactoryRegistry
    let parseNodeFactoryRegistry : ParseNodeFactoryRegistry
    
    if (requestAdapter.getParseNodeFactory() instanceof ParseNodeFactoryRegistry) {
        parseNodeFactoryRegistry = requestAdapter.getParseNodeFactory() as ParseNodeFactoryRegistry
    } else {
        throw new Error("requestAdapter.getParseNodeFactory() is not a ParseNodeFactoryRegistry")
    }
    
    if (requestAdapter.getSerializationWriterFactory() instanceof SerializationWriterFactoryRegistry) {
        serializationWriterFactory = requestAdapter.getSerializationWriterFactory() as SerializationWriterFactoryRegistry
    } else {
        throw new Error("requestAdapter.getSerializationWriterFactory() is not a SerializationWriterFactoryRegistry")
    }
    
    
    const backingStoreFactory = requestAdapter.getBackingStoreFactory();
    if (requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === null || requestAdapter.baseUrl === "") {
        requestAdapter.baseUrl = "http://localhost:7071/api";
    }
    const pathParameters: Record<string, unknown> = {
        "baseurl": requestAdapter.baseUrl,
    };
    return apiClientProxifier<BackendApiClient>(requestAdapter, pathParameters, BackendApiClientNavigationMetadata, undefined);
}
/**
 * Uri template for the request builder.
 */
export const BackendApiClientUriTemplate = "{+baseurl}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BackendApiClientNavigationMetadata: Record<Exclude<keyof BackendApiClient, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    analytics: {
        navigationMetadata: AnalyticsRequestBuilderNavigationMetadata,
    },
    health: {
        requestsMetadata: HealthRequestBuilderRequestsMetadata,
    },
};
/* tslint:enable */
/* eslint-enable */
